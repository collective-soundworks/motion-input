#!/usr/bin/env node
var fse = require('fs-extra');
var klaw = require('klaw');
var watch = require('watch');
var path = require('path');
var pkg = require('../package.json');
var util = require('util');

var javascripts = require('./javascripts');
var server = require('./server');
var cwd = process.cwd();

'use strict';

/**
 * Options for babel transpiling.
 */
var babelrc = fse.readFileSync(path.join(cwd, '.babelrc'));
var babelOptions = JSON.parse(babelrc.toString());

/**
 * Options for watch.
 */
var watchOptions = {
  ignoreDotFiles: true,
  ignoreUnreadableDir: true,
  ignoreNotPermitted: true,
  interval: 2, // watch internally use `fs.watchFile`
};

/**
 * Options for browserify.
 */
var browserifyOptions = {
  debug: true,
  fullPaths: false,
  standalone: pkg.standalone,
};

/**
 * Watched directories
 */
var srcDirectory = path.join(cwd, 'src');
var distDirectory = path.join(cwd, 'dist');
var clientEntryPoint = path.join(distDirectory, 'client/index.js');
var bundlePath = path.join(cwd, 'public/bundle.js');

// http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

/**
 * Define which file should be ignored by every command.
 */
var allowedExtentions = /\.js$/;
var excludeFiles = /^\./; // exclude hidden files
var clientFile = new RegExp('^' + escapeRegExp(srcDirectory + path.sep + 'client'));




/**
 * Test the given filename, to ensure it can be processed by any command / tranpsiler
 * @param {String} filename - The filename to be checked.
 * @param {Boolean} [ensureFile=true] - If set to false, don't test if the file exists.
 */
function isAllowed(filename, ensureFile) {
  ensureFile = ensureFile === undefined ? true : ensureFile;

  var basename = path.basename(filename);
  var isFile = true;

  if (ensureFile) {
    try {
      isFile = fse.lstatSync(filename).isFile() && !fse.lstatSync(filename).isSymbolicLink();
    } catch(e) {
      console.log(e.message);
      isFile = false;
    }
  }

  var hasAllowedExt = allowedExtentions.test(basename);
  var notExcludeFile = !excludeFiles.test(basename);

  return isFile && hasAllowedExt && notExcludeFile;
}

/**
 * Returns a list of the file in a given folder recursively.
 */
function _getFileList(folder, callback) {
  var files = [];

  klaw(folder)
    .on('data', function(item) {
      if (item.stats.isFile() && isAllowed(item.path))
        files.push(item.path);
    })
    .on('end', function() {
      callback(files);
    });
}

/**
 * Watch javascript source files.
 */
function watchFiles(srcDirectory, distDirectory) {
  var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions, browserifyOptions);

  function processFile(filename, stats) {
    if (!isAllowed(filename)) return;

    var isClientFile = clientFile.test(filename);
    var callback;

    if (isClientFile) {
      callback = function() {};
    } else {
      server.stop();
      callback = server.start;
    }

    transpiler.transpile(filename, [], callback);
  }

  watch.createMonitor(srcDirectory, Object.assign({}, watchOptions), function(monitor) {
    monitor.on('created', processFile);
    monitor.on('changed', processFile);
    monitor.on('removed', (filename, stats) => {
      if (clientFile.test(filename)) {
        transpiler.delete(filename);
        transpiler.bundle(clientEntryPoint, bundlePath);
      } else {
        server.stop();
        transpiler.delete(filename, server.start);
      }
    });
  });

  // start server
  server.start();
}


function transpile(srcDirectory, distDirectory, callback) {
  _getFileList(srcDirectory, function(files) {
    var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions);
    transpiler.transpile(undefined, files, callback);
  });
}

function bundle(distDirectory, callback) {
  var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions, browserifyOptions);

  transpile(srcDirectory, distDirectory, function() {
    transpiler.bundle(clientEntryPoint, bundlePath, callback);
  });
}

module.exports.getTranspiler = function() {
  return javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions, browserifyOptions);
}

/* --------------------------------------------------------------------------
 * Process and execute the given command.
 * -------------------------------------------------------------------------- */

var command = process.argv[2];
var args = process.argv.slice(3);
var argv = {};
for (var i = 0; i < args.length; i += 2)
  argv[args[i]] = args[i + 1];

switch (command) {
  /**
   * Watch the file system and transpile from es6 to es5.
   */
  case '--watch':
    watchFiles(srcDirectory, distDirectory);
    break;

  /**
   * Transpile all files in `src` from es6 to es5.
   */
  case '--transpile':
    transpile(srcDirectory, distDirectory);
    break;

  /**
   * Transpile all files in `src` from es6 to es5 and browserify all the things.
   */
  case '--bundle':
    bundle(distDirectory);
    break;
}

/* --------------------------------------------------------------------------
 * -------------------------------------------------------------------------- */

